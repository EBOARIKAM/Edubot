const http = require('http');
const url = require('url');
const querystring = require('querystring');

// Configuration
const PORT = 3000;
const PARENT_PIN = '1234';

// Headers CORS
const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Content-Type': 'application/json; charset=utf-8'
};

// Donn√©es utilisateurs (simulation de base de donn√©es)
const usersData = {
    'alex': {
        id: 'alex',
        name: 'Alex l\'Explorateur',
        avatar: 'üë¶',
        age: 7,
        points: 450,
        level: 3,
        progress: {
            courses_completed: ['chiffres_1_5', 'alphabet_a_c'],
            current_streak: 5,
            total_time: 1500,
            last_activity: new Date().toISOString(),
            favorite_subject: 'Math√©matiques'
        },
        stats: {
            today_time: 25,
            completed_today: 3,
            weekly_activity: [10, 15, 20, 25, 30, 0, 0],
            monthly_progress: 85
        }
    },
    'sarah': {
        id: 'sarah',
        name: 'Sarah la Brillante',
        avatar: 'üëß',
        age: 8,
        points: 680,
        level: 4,
        progress: {
            courses_completed: ['chiffres_1_10', 'addition_base', 'alphabet_complet'],
            current_streak: 7,
            total_time: 2100,
            last_activity: new Date().toISOString(),
            favorite_subject: 'Fran√ßais'
        },
        stats: {
            today_time: 35,
            completed_today: 4,
            weekly_activity: [15, 20, 25, 30, 35, 0, 0],
            monthly_progress: 92
        }
    },
    'jordan': {
        id: 'jordan',
        name: 'Jordan le Champion',
        avatar: 'üßí',
        age: 9,
        points: 920,
        level: 5,
        progress: {
            courses_completed: ['chiffres_1_10', 'addition_base', 'soustraction', 'alphabet_complet', 'english_colors'],
            current_streak: 12,
            total_time: 3200,
            last_activity: new Date().toISOString(),
            favorite_subject: 'Sciences'
        },
        stats: {
            today_time: 40,
            completed_today: 5,
            weekly_activity: [20, 25, 30, 35, 40, 0, 0],
            monthly_progress: 96
        }
    }
};

// Fonction pour lire le body des requ√™tes POST
function getRequestBody(req) {
    return new Promise((resolve, reject) => {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            try {
                resolve(body ? JSON.parse(body) : {});
            } catch (error) {
                resolve({});
            }
        });
        req.on('error', reject);
    });
}

// Fonction pour envoyer une r√©ponse JSON
function sendJSON(res, data, statusCode = 200) {
    res.writeHead(statusCode, corsHeaders);
    res.end(JSON.stringify(data, null, 2));
}

// Fonction pour obtenir une r√©ponse IA √©ducative
function getEducationalAIResponse(prompt) {
    const lowerPrompt = prompt.toLowerCase();
    
    const responses = {
        'math√©matiques': 'üßÆ Les math√©matiques sont magiques ! ‚ú® Veux-tu apprendre √† compter avec des mangues du Cameroun, faire des additions avec des bananes, ou d√©couvrir les formes g√©om√©triques ? Je peux t\'expliquer avec des exemples amusants ! ü•≠üçå',
        'math': 'üßÆ Les math√©matiques sont magiques ! ‚ú® Veux-tu apprendre √† compter avec des mangues du Cameroun, faire des additions avec des bananes, ou d√©couvrir les formes g√©om√©triques ? Je peux t\'expliquer avec des exemples amusants ! ü•≠üçå',
        'addition': '‚ûï L\'addition, c\'est fantastique ! Imagine que tu as 3 √©l√©phants üêòüêòüêò dans la r√©serve de Waza, et que 2 autres √©l√©phants üêòüêò arrivent ! En tout, √ßa fait 3 + 2 = 5 √©l√©phants ! üéâ',
        'soustraction': '‚ûñ La soustraction, c\'est comme partager ! Si tu as 7 mangues ü•≠ü•≠ü•≠ü•≠ü•≠ü•≠ü•≠ et que tu en donnes 3 √† tes amis, il t\'en reste 7 - 3 = 4 mangues ! üòä',
        'fran√ßais': 'üá´üá∑ Le fran√ßais est une langue magnifique ! Veux-tu apprendre l\'alphabet avec des mots camerounais, d√©couvrir de nouveaux mots, ou lire des histoires de notre pays ? üìö',
        'francais': 'üá´üá∑ Le fran√ßais est une langue magnifique ! Veux-tu apprendre l\'alphabet avec des mots camerounais, d√©couvrir de nouveaux mots, ou lire des histoires de notre pays ? üìö',
        'anglais': 'üá¨üáß English is wonderful! Let\'s learn together! We can discover colors, count animals from Cameroon, or learn about our beautiful country! ü¶Å',
        'english': '‚ú® Great choice! English opens many doors! We can learn colors, animals, and so much more about Cameroon! üåü',
        'sciences': 'üî¨ La science, c\'est extraordinaire ! Veux-tu d√©couvrir les animaux du Cameroun ü¶Å, comprendre comment poussent nos plantes üå±, ou explorer les √©toiles ? üåü',
        'science': 'üî¨ La science, c\'est extraordinaire ! Veux-tu d√©couvrir les animaux du Cameroun ü¶Å, comprendre comment poussent nos plantes üå±, ou explorer les √©toiles ? üåü',
        'bonjour': 'üëãüåü Bonjour mon petit g√©nie ! Je suis ravi de te parler aujourd\'hui ! Es-tu pr√™t pour une aventure d\'apprentissage ? üòä‚ú®',
        'salut': 'ü§ö Salut ! Quel plaisir de te retrouver ! Qu\'est-ce qui t\'int√©resse aujourd\'hui ? Des maths, du fran√ßais, de l\'anglais ou des sciences ? üéØ',
        'aide': 'ü§ñüí™ Je suis ton assistant ! Tu peux me poser des questions sur tes cours, je suis l√† pour t\'aider √† devenir un petit g√©nie ! ‚ú®',
        'help': 'ü§ñüí™ I\'m your assistant! You can ask me about your lessons, I\'m here to help you become a little genius! ‚ú®'
    };
    
    // Recherche de mots-cl√©s
    for (const [keyword, response] of Object.entries(responses)) {
        if (lowerPrompt.includes(keyword)) {
            return response;
        }
    }
    
    // R√©ponses g√©n√©riques
    const genericResponses = [
        'ü§î‚ú® Excellente question ! Dans quelle mati√®re veux-tu de l\'aide ? Maths, fran√ßais, anglais ou sciences ? üòä',
        'üåü Tu es tr√®s curieux, c\'est formidable ! Dis-moi ce qui t\'int√©resse le plus ! üéØ',
        'üòä Peux-tu √™tre plus pr√©cis ? Je veux t\'aider au mieux ! üí™'
    ];
    
    return genericResponses[Math.floor(Math.random() * genericResponses.length)];
}

// Serveur HTTP
const server = http.createServer(async (req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const path = parsedUrl.pathname;
    const method = req.method;

    console.log(`${method} ${path}`);

    // Gestion CORS preflight
    if (method === 'OPTIONS') {
        res.writeHead(200, corsHeaders);
        res.end();
        return;
    }

    try {
        // Route principale
        if (path === '/' && method === 'GET') {
            sendJSON(res, {
                message: 'EduBot Premium Backend - Serveur op√©rationnel ‚úÖ',
                version: '1.0.0',
                status: 'running',
                timestamp: new Date().toISOString(),
                endpoints: [
                    'GET  / - Info du serveur',
                    'GET  /api/app-info - Info application',
                    'POST /api/parent-login - Connexion parent',
                    'POST /api/ask-gemini - Assistant IA',
                    'POST /api/save-progress - Sauvegarder progr√®s',
                    'GET  /api/user-progress - Progr√®s utilisateur',
                    'GET  /api/global-stats - Statistiques'
                ]
            });
            return;
        }

        // Info de l'application
        if (path === '/api/app-info' && method === 'GET') {
            sendJSON(res, {
                title: 'EduBot Premium (Serveur Connect√©!)',
                version: '2.0.0',
                status: 'connected',
                features: ['IA Gemini', 'Sauvegarde Cloud', 'Multi-profils', 'TTS', 'Multi-langues'],
                timestamp: new Date().toISOString()
            });
            return;
        }

        // Connexion parentale
        if (path === '/api/parent-login' && method === 'POST') {
            const body = await getRequestBody(req);
            const { pin } = body;
            
            console.log(`üîê Tentative connexion parent: ${pin}`);
            
            if (!pin) {
                sendJSON(res, {
                    success: false,
                    message: 'Code PIN requis'
                }, 400);
                return;
            }
            
            if (pin.length !== 4 || !/^\d{4}$/.test(pin)) {
                sendJSON(res, {
                    success: false,
                    message: 'Le code PIN doit contenir 4 chiffres'
                }, 400);
                return;
            }
            
            if (pin === PARENT_PIN) {
                console.log('‚úÖ Connexion parent autoris√©e');
                sendJSON(res, {
                    success: true,
                    message: 'Acc√®s parental autoris√©',
                    user: {
                        type: 'parent',
                        name: 'Espace Parent',
                        permissions: ['view_stats', 'manage_profiles']
                    }
                });
            } else {
                console.log('‚ùå Code PIN incorrect');
                sendJSON(res, {
                    success: false,
                    message: 'Code PIN incorrect'
                }, 401);
            }
            return;
        }

        // Assistant IA
        if (path === '/api/ask-gemini' && method === 'POST') {
            const body = await getRequestBody(req);
            const { prompt } = body;
            
            console.log(`ü§ñ Question IA: ${prompt?.substring(0, 50)}...`);
            
            if (!prompt) {
                sendJSON(res, {
                    success: false,
                    error: 'Question requise'
                }, 400);
                return;
            }
            
            try {
                const response = getEducationalAIResponse(prompt);
                console.log('‚úÖ R√©ponse IA g√©n√©r√©e');
                sendJSON(res, {
                    success: true,
                    response: response,
                    timestamp: new Date().toISOString(),
                    source: 'local'
                });
            } catch (error) {
                console.error('‚ùå Erreur IA:', error.message);
                sendJSON(res, {
                    success: false,
                    error: 'Erreur assistant IA',
                    fallback: 'D√©sol√©, je rencontre des difficult√©s. Peux-tu reformuler ?'
                }, 500);
            }
            return;
        }

        // Sauvegarder progr√®s
        if (path === '/api/save-progress' && method === 'POST') {
            const body = await getRequestBody(req);
            const { userId, progressData } = body;
            
            console.log(`üíæ Sauvegarde progr√®s: ${userId}`);
            
            if (!userId || !progressData) {
                sendJSON(res, {
                    success: false,
                    message: 'userId et progressData requis'
                }, 400);
                return;
            }
            
            if (usersData[userId]) {
                usersData[userId] = {
                    ...usersData[userId],
                    ...progressData,
                    progress: {
                        ...usersData[userId].progress,
                        ...progressData.progress,
                        last_activity: new Date().toISOString()
                    }
                };
                
                console.log('‚úÖ Progr√®s sauvegard√©s');
                sendJSON(res, {
                    success: true,
                    message: 'Progr√®s sauvegard√©s',
                    data: usersData[userId]
                });
            } else {
                sendJSON(res, {
                    success: false,
                    message: 'Utilisateur non trouv√©'
                }, 404);
            }
            return;
        }

        // R√©cup√©rer progr√®s utilisateur
        if (path.startsWith('/api/user-progress/') && method === 'GET') {
            const userId = path.split('/')[3]; // /api/user-progress/userId
            
            console.log(`üìä R√©cup√©ration progr√®s: ${userId}`);
            
            if (usersData[userId]) {
                console.log('‚úÖ Donn√©es trouv√©es');
                sendJSON(res, {
                    success: true,
                    data: usersData[userId]
                });
            } else {
                console.log('‚ùå Utilisateur non trouv√©');
                sendJSON(res, {
                    success: false,
                    message: 'Utilisateur non trouv√©',
                    availableUsers: Object.keys(usersData)
                }, 404);
            }
            return;
        }

        // R√©cup√©rer progr√®s (alternative)
        if (path === '/api/user-progress' && method === 'GET') {
            const userId = parsedUrl.query.userId;
            
            if (!userId) {
                sendJSON(res, {
                    success: false,
                    message: 'userId requis en param√®tre'
                }, 400);
                return;
            }
            
            console.log(`üìä R√©cup√©ration progr√®s: ${userId}`);
            
            if (usersData[userId]) {
                sendJSON(res, {
                    success: true,
                    data: usersData[userId]
                });
            } else {
                sendJSON(res, {
                    success: false,
                    message: 'Utilisateur non trouv√©'
                }, 404);
            }
            return;
        }

        // Statistiques globales
        if (path === '/api/global-stats' && method === 'GET') {
            console.log('üìà G√©n√©ration statistiques globales');
            
            const allUsers = Object.values(usersData);
            const totalUsers = allUsers.length;
            const totalTime = allUsers.reduce((sum, user) => sum + user.progress.total_time, 0);
            const averageStreak = Math.round(allUsers.reduce((sum, user) => sum + user.progress.current_streak, 0) / totalUsers);
            
            const stats = {
                total_users: totalUsers,
                total_time_minutes: totalTime,
                average_streak_days: averageStreak,
                most_active_user: allUsers.reduce((prev, current) => 
                    prev.progress.total_time > current.progress.total_time ? prev : current
                ),
                weekly_activity: {
                    monday: allUsers.reduce((sum, user) => sum + user.stats.weekly_activity[0], 0),
                    tuesday: allUsers.reduce((sum, user) => sum + user.stats.weekly_activity[1], 0),
                    wednesday: allUsers.reduce((sum, user) => sum + user.stats.weekly_activity[2], 0),
                    thursday: allUsers.reduce((sum, user) => sum + user.stats.weekly_activity[3], 0),
                    friday: allUsers.reduce((sum, user) => sum + user.stats.weekly_activity[4], 0),
                    saturday: allUsers.reduce((sum, user) => sum + user.stats.weekly_activity[5], 0),
                    sunday: allUsers.reduce((sum, user) => sum + user.stats.weekly_activity[6], 0)
                }
            };
            
            console.log('‚úÖ Statistiques g√©n√©r√©es');
            sendJSON(res, {
                success: true,
                stats: stats,
                timestamp: new Date().toISOString()
            });
            return;
        }

        // Route 404
        console.log(`‚ùå Route non trouv√©e: ${method} ${path}`);
        sendJSON(res, {
            success: false,
            message: 'Endpoint non trouv√©',
            requested: `${method} ${path}`,
            available: [
                'GET /', 'GET /api/app-info', 'POST /api/parent-login',
                'POST /api/ask-gemini', 'POST /api/save-progress',
                'GET /api/user-progress/:userId', 'GET /api/global-stats'
            ]
        }, 404);

    } catch (error) {
        console.error('‚ùå Erreur serveur:', error.message);
        sendJSON(res, {
            success: false,
            message: 'Erreur interne serveur',
            error: error.message
        }, 500);
    }
});

// D√©marrage du serveur
server.listen(PORT, () => {
    console.log('üöÄ========================================üöÄ');
    console.log(`üì± EduBot Premium Backend (HTTP Natif)`);
    console.log(`üåê URL: http://localhost:${PORT}`);
    console.log(`üìÖ D√©marr√©: ${new Date().toLocaleString('fr-FR')}`);
    console.log('üöÄ========================================üöÄ');
    console.log('');
    console.log('üì° Endpoints disponibles:');
    console.log('   GET  /                      - Info serveur');
    console.log('   GET  /api/app-info          - Info application');
    console.log('   POST /api/parent-login      - Connexion parent');
    console.log('   POST /api/ask-gemini        - Assistant IA');
    console.log('   POST /api/save-progress     - Sauvegarder');
    console.log('   GET  /api/user-progress/:id - Progr√®s user');
    console.log('   GET  /api/global-stats      - Statistiques');
    console.log('');
    console.log('‚úÖ Serveur HTTP natif pr√™t !');
    console.log(`üîê Code PIN parent: ${PARENT_PIN}`);
    console.log('');
    console.log('üß™ Test: curl http://localhost:3000/api/app-info');
});

// Gestion propre de l'arr√™t
process.on('SIGTERM', () => {
    console.log('üì¥ Arr√™t serveur...');
    server.close();
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('\nüì¥ Arr√™t serveur...');
    server.close();
    process.exit(0);
});

console.log('üéØ Serveur HTTP natif - Aucune d√©pendance Express requise !');